stages:
- stage: Release
  displayName: 'Release'
  jobs: 
  - job: CreateRelease
    displayName: 'Create release'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
      displayName: 'Downloading artifacts'
    - task: Bash@3
      displayName: 'Getting next version number'
      inputs:
        targetType: 'inline'
        script: |
          patch_version=$(./latest-patch-version.sh $(Build.SourceBranchName) $(version_no_env_segment))
          
          semantic_version_no=$(printf "%s.%s%s" "$(Build.SourceBranchName)" "$patch_version" "$(version_no_env_segment)")
          echo "##vso[task.setvariable variable=semantic_version_no]$semantic_version_no"

          if [ -z "$(version_no_env_segment)" ]; then
            latest_env_tag=$(git tag --list "v*[0-9]" | sort -V | tail -n 1)
            buildIdSegment=''
          else
            latest_env_tag=$(git tag --list "v*$(version_no_env_segment)" | sort -V | tail -n 1)
            buildIdSegment='-$(Build.BuildId)'
          fi

          echo "##vso[task.setvariable variable=latest_env_tag]$latest_env_tag"
          echo "##vso[task.setvariable variable=buildIdSegment]$buildIdSegment"
    - task: GithubRelease@1 
      displayName: 'Creating GitHub Release'
      inputs:
        gitHubConnection: 'github.com_mpd-dawn'
        title: 'Growzen $(semantic_version_no)'
        repositoryName: '$(Build.Repository.Name)'
        tagSource: userSpecifiedTag
        tag: 'v$(semantic_version_no)$(buildIdSegment)'
        isPreRelease: false
        changeLogCompareToRelease: 'lastNonDraftReleaseByTag'
        changeLogCompareToReleaseTag: $(latest_env_tag)
        addChangeLog: true
        changeLogType: issueBased
        action: create
        assets: '$(Build.ArtifactStagingDirectory)/**/*'
