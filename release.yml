stages:
- stage: Release
  # dependsOn: [ '' ]
  displayName: 'Release'
  jobs: 
  - job: CreateRelease
    displayName: 'Create release'
    pool:
      vmImage: 'windows-latest'
    steps:
    # - checkout: none
    - task: DownloadPipelineArtifact@2
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
      displayName: 'Downloading artifacts'
    - task: Bash@3
      displayName: 'Getting previous patch version'
      inputs:
        targetType: 'inline'
        script: |
          patch_version=$(./latest-patch-version.sh)
          echo "##vso[task.setvariable variable=patch_version]$patch_version"

          echo $patch_version
    - task: Bash@3
      displayName: 'echo'
      inputs:
        targetType: 'inline'
        script: |
          echo $(patch_version)
    - task: GithubRelease@1 
      displayName: 'Creating GitHub Release'
      env:
        semantic_version_no: $[ format('{0}.{1}-{2}', variables['version_no_from_branch_name'], $(patch_version), variables['version_no_env_segment']) ]
      inputs:
        gitHubConnection: 'github.com_mpd-dawn'
        title: 'Growzen $(semantic_version_no)'
        repositoryName: '$(Build.Repository.Name)'
        tagSource: userSpecifiedTag
        tag: 'v$(semantic_version_no)'
        isPreRelease: $(is_pre_release)
        changeLogType: issueBased
        action: create
        assets: '$(Build.ArtifactStagingDirectory)/**/*'
